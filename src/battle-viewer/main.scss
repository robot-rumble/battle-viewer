@mixin bar {
  padding: map-get($spacers, 2) map-get($spacers, 3);
  border-bottom: $border-2;
}

._app-root {
  display: flex;
  flex-direction: column;

  ._battle-viewer-root, ._grid-viewer-root {
    display: flex;
    flex-direction: column;
    height: 100%;
  }

  ._grid-viewer-root {
    align-items: center;
  }

  ._battle-viewer-root {
    margin: map_get($spacers, 3) 0;
  }

  ._bar {
    @include bar;
    display: flex;
    justify-content: space-between;

    ._select-button {
      display: flex;
    }
  }

  .box {
    .title {
      font-weight: bold;
    }

    .info {
      font-style: italic;
    }

    & > * {
      padding: map_get($spacers, 1) map_get($spacers, 2);
    }
  }

  ._logs {
    // using display: flex fixes a problem where setting
    // height: 100% on textarea makes it go beyond the box
    display: flex;
    flex-direction: column;

    border-top: $border-2;
    height: 100%;
    width: 100%;

    textarea {
      // cancel padding so that the textarea background stretches all the way across
      width: 100%;
      height: 100%;
      resize: none;
      font-family: monospace;
      font-size: 1rem;
      background: var(--grey-4);
      color: var(--black);
    }
  }

  ._opponent-select {
    margin: map-get($spacers, 3) map-get($spacers, 3);

    & > * {
      margin-bottom: map-get($spacers, 3);
    }
  }

  ._run-bar {
    text-align: center;
    position: relative;
    margin-bottom: map_get($spacers, 3);
    display: flex;

    ._battle-section {
      width: 75%;

      ._battle {
        display: flex;
        margin-left: map_get($spacers, 3);

        ._buttons {
          display: flex;
          margin: auto;

          & > * {
            margin: 0 map_get($spacers, 2);
            white-space: nowrap;
          }
        }
      }

      ._progress {
        background: var(--light-blue);
        position: absolute;
        height: 100%;
        z-index: -1;
      }
    }

    ._winner-section {
      border-left: $border-2;
      width: 25%;
      display: flex;
      justify-content: center;

      .team-Red {
        color: var(--red);
      }

      .team-Blue {
        color: var(--blue);
      }
    }

    //noinspection CssReplaceWithShorthandSafely
    ._progress-outline {
      position: absolute;
      height: 100%;
      width: 100%;
      border: $border-2;
      border-left: 0;
      border-right: 0;
      z-index: -2;
    }
  }

  ._grid-viewer {
    width: 95%;
    display: flex;
    // keep inspector height from filling entire height of grid-viewer
    align-items: start;
  }

  ._grid-viewer-main {
    margin-right: map_get($spacers, 2);
    width: 50%;

    ._grid-viewer-controls {
      display: flex;
      align-items: center;
      justify-content: space-between;

      // styles borrowed from .box

      border: $border-2;
      margin-bottom: -2px;

      & > * {
        margin: map_get($spacers, 1) map_get($spacers, 2);
      }

      ._turn-indicator {
        font-weight: bold;
        // stop wrapping and increasing control box height
        white-space: nowrap;

        // add a constant size so that when the turn indicator grows (eg, goes from 9 to 10),
        // the input boxes don't move and glitch out
        min-width: 4rem;
      }

      .arrow-button {
        padding: 0 0.5rem;
        margin-top: -3px;

        &:disabled {
          color: var(--grey-2);
        }
      }

      input {
        width: 60%;
      }
    }
  }

  ._inspector {
    width: 50%;
    border: $border-2;
    overflow: auto;

    ._table {
      line-height: 1;
    }

    .info {
      font-size: 1rem;
    }
  }

  ._renderer-wrapper {
    /* https://stackoverflow.com/questions/5445491/height-equal-to-dynamic-width-css-fluid-layout */
    width: 100%;
    height: 0;
    padding-top: 100%;
    position: relative;

    ._renderer {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;

      display: grid;

      .grid-row,
      .grid-col {
        border: $border-3;
      }

      .obj {
        position: relative;

        &.unit {
          cursor: pointer;

          &.team-Red {
            background: var(--light-red);

            .health-bar {
              background: var(--red);
            }
          }

          &.team-Blue {
            background: var(--light-blue);

            .health-bar {
              background: var(--blue);
            }
          }
        }

        &.terrain {
          background: var(--grey-3);
          z-index: -1;
        }

        .health-bar {
          position: absolute;
          margin: auto;
          left: 0;
          right: 0;
          top: 0;
          bottom: 0;
        }
      }

      .obj.selected::after,
      .obj.errored::after,
      .obj.inspected::after {
        content: '';
        position: absolute;
        height: 50%;
        width: 50%;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        margin: auto;
      }


      .obj.errored::after {
        background: black;
      }

      .obj.inspected::after,
      .obj.inspected.errored {
        background: white;
        border-radius: 50%;
        opacity: 0.8;
      }

      .obj.selected::after,
      .obj.selected.errored::after,
      .obj.selected.inspected.errored::after {
        background: white;
        border-radius: 0;
        opacity: 0.5;
        height: 100%;
        width: 100%;
      }
    }
  }
}
